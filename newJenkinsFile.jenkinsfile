pipeline {
  agent { label 'linux' }  
  //agent any

  parameters {
    string(name: 'ApplicationScope', defaultValue: '', description: 'Comma-separated list of LifeTime applications to deploy.')
    string(name: 'ApplicationScopeWithTests', defaultValue: '', description: 'Comma-separated list of LifeTime applications to deploy (including test applications)')
    string(name: 'TriggeredBy', defaultValue: 'N/A', description: 'Name of LifeTime user that triggered the pipeline remotely.')
  }

  options { skipStagesAfterUnstable() }

  environment {
    // Artifacts Folder
    ArtifactsFolder = "Artifacts"
    // LifeTime
    LifeTimeHostname = 'https://application-lt.vilavi.fr/'
    LifeTimeAPIVersion = 2
    AuthorizationToken = credentials('LifeTimeServiceAccountToken')
    // Envs (3 environnements)
    DevelopmentEnvironment = 'development environment # 3'
    RegressionEnvironment  = 'Recette Assurance'
	AcceptanceEnvironment = 'Qualif Assurance'
    PreProductionEnvironment = 'Pre-PROD Assurance'
    ProductionEnvironment = 'production Assurance'
    
    // URLs de test
	//ProbeEnvironmentURL = 'https://application-lt.vilavi.fr/'
	ProbeEnvironmentURL = 'https://application-prd.vilavi.fr/'
    BddEnvironmentURL = 'https://application-dev.vilavi.fr/'
	// OutSystems PyPI package version
    OSPackageVersion = '0.10.1'
  }

  stages {
    stage('Install Python Dependencies') {
      steps {
        echo "Create ${env.ArtifactsFolder} Folder"
        sh "mkdir -p ${env.ArtifactsFolder}"

        echo "Install Python Virtual environments"
        sh 'pip install -q -I virtualenv --user'

        withPythonEnv('python') {
          echo "Install Python requirements"
          sh 'pip install -U outsystems-pipeline'
        }
      }
    }

    stage('Get and Deploy Latest Tags (Dev -> Regression)') {
      steps {
        withPythonEnv('python') {
          echo "Pipeline run triggered by '${params.TriggeredBy}', apps (incl. tests): '${params.ApplicationScopeWithTests}'"
          echo 'Retrieving latest application tags from Development...'
          sh "python -m outsystems.pipeline.fetch_lifetime_data --artifacts \"${env.ArtifactsFolder}\" --lt_url ${env.LifeTimeHostname} --lt_token ${env.AuthorizationToken} --lt_api_version ${env.LifeTimeAPIVersion}"

          echo 'Deploying latest application tags to Regression...'
          sh "python -m outsystems.pipeline.deploy_latest_tags_to_target_env --artifacts \"${env.ArtifactsFolder}\" --lt_url ${env.LifeTimeHostname} --lt_token ${env.AuthorizationToken} --lt_api_version ${env.LifeTimeAPIVersion} --source_env \"${env.DevelopmentEnvironment}\" --destination_env \"${env.RegressionEnvironment}\" --app_list \"${params.ApplicationScopeWithTests}\" --allow_parallel_deployments"
        }
      }
      post {
        always {
          dir("${env.ArtifactsFolder}") {
            archiveArtifacts artifacts: "*.cache", onlyIfSuccessful: true
            archiveArtifacts artifacts: "*_data/*.cache", onlyIfSuccessful: true
          }
        }
        failure {
          dir("${env.ArtifactsFolder}") {
            archiveArtifacts artifacts: "DeploymentConflicts/**", allowEmptyArchive: true
          }
        }
      }
    }

    stage('Run Regression (BDD + JUnit)') {
      steps {
        withPythonEnv('python') {
          echo 'Generating URLs for BDD testing...'
          sh "python -m outsystems.pipeline.generate_unit_testing_assembly --artifacts \"${env.ArtifactsFolder}\" --app_list \"${params.ApplicationScopeWithTests}\" --cicd_probe_env ${env.ProbeEnvironmentURL} --bdd_framework_env ${env.BddEnvironmentURL}"

          echo "Testing the URLs and generating the JUnit results XML..."
          sh(script: "python -m outsystems.pipeline.evaluate_test_results --artifacts \"${env.ArtifactsFolder}\"", returnStatus: true)
        }
      }
      post {
        always {
          echo "Publishing JUnit test results..."
          junit(testResults: "${env.ArtifactsFolder}/junit-result.xml", allowEmptyResults: true)

          dir("${env.ArtifactsFolder}") {
            archiveArtifacts artifacts: "*_data/*.cache", onlyIfSuccessful: true
          }
        }
      }
    }

    stage('Upload GitHub (optional)') {
      steps {
        withPythonEnv('python') {
          echo 'Calling TriggerPipeline API to request upload of OAPs if configured.'
          sh "python -m outsystems.pipeline.upload_github --lt_url ${env.LifeTimeHostname} --lt_token ${env.AuthorizationToken} --pipeline_id 1 --artifacts \"${env.ArtifactsFolder}\""
        }
      }
    }

    stage('Deploy Production (Regression -> Prod)') {
      steps {
        timeout(time: 1, unit: 'DAYS') {
          input 'Accept changes and deploy to Production?'
          withPythonEnv('python') {
            echo 'Deploying latest application tags to Production...'
            sh "python -m outsystems.pipeline.deploy_latest_tags_to_target_env --artifacts \"${env.ArtifactsFolder}\" --lt_url ${env.LifeTimeHostname} --lt_token ${env.AuthorizationToken} --lt_api_version ${env.LifeTimeAPIVersion} --source_env \"${env.RegressionEnvironment}\" --destination_env \"${env.ProductionEnvironment}\" --app_list \"${params.ApplicationScope}\" --allow_parallel_deployments"
          }
        }
      }
      post {
        always {
          dir("${env.ArtifactsFolder}") {
            archiveArtifacts artifacts: "*_data/*.cache", onlyIfSuccessful: true
          }
        }
        failure {
          dir("${env.ArtifactsFolder}") {
            archiveArtifacts artifacts: "DeploymentConflicts/**", allowEmptyArchive: true
          }
        }
      }
    }
  }

  post {
    always {
      script {
        // Sécurisé même si le workspace n'existe plus
        if (env.WORKSPACE) {
          dir("${env.ArtifactsFolder}") {
            deleteDir()
          }
        }
      }
    }
  }

}
